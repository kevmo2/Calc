public void actionPerformed(ActionEvent event) {
        if (isNumericButtonPushed(event)) {
            numericButtonPushed((JButton) event.getSource());
        } else if (isClearPushed(event)) {
            clearButtonPushed();
        } else if (isOperationButtonPushed(event)) {
            operationButtonPushed(event);
        } else if (isEqualsButtonPushed(event)) {
            equalButtonPushed();
        } else if (isPlusMinusButtonPushed(event)) {
            plusMinusButtonPushed();
        }
    }

    private Boolean isNumericButtonPushed(ActionEvent event){
        boolean returnValue;

        if (event.getSource() == zeroButton) {
            returnValue = true;
        } else if (event.getSource() == oneButton) {
            returnValue = true;
        } else if (event.getSource() == twoButton) {
            returnValue = true;
        } else if (event.getSource() == threeButton) {
            returnValue = true;
        } else if (event.getSource() == fourButton) {
            returnValue = true;
        } else if (event.getSource() == fiveButton) {
            returnValue = true;
        } else if (event.getSource() == sixButton) {
            returnValue = true;
        } else if (event.getSource() == sevenButton) {
            returnValue = true;
        } else if (event.getSource() == eightButton) {
            returnValue = true;
        } else if (event.getSource() == nineButton) {
            returnValue = true;
        } else if (event.getSource() == decimalButton) {
            returnValue = true;
        } else {
            returnValue = false;
        }

        return returnValue;
    }

    private Boolean isOperationButtonPushed(ActionEvent event) {
        if (event.getSource() == addButton) {
            return true;
        } else if (event.getSource() == subButton) {
            return true;
        } else if (event.getSource() == multiButton) {
            return true;
        } else return event.getSource() == divButton;
    }

    private Boolean isClearPushed(ActionEvent event) {
        return event.getSource() == clearButton;
    }

    private Boolean isEqualsButtonPushed(ActionEvent event) {
        return event.getSource() == equalsButton;
    }

    private Boolean isPlusMinusButtonPushed(ActionEvent event) {
        return event.getSource() == plusMinusButton;
    }

    private Boolean isLengthSixteen(JTextField field) {
        return field.getText().length() < 16;
    }

    private Boolean isNumberNegative(Double number) {
        if (number < 0) {
            return true;
        } else
            return false;
    }

    private void numericButtonPushed(JButton button) {
        String fieldText = ansField.getText();
        System.out.println("numericButtonPushed " + queuedOperation.toString());

        if (previousClick.equals(ClickType.OPERATION)) {
            clearField();
            fieldText = ansField.getText();
        }

        if(isLengthSixteen(ansField)){
            if(fieldClear){
                fieldText = button.getText();
            } else if (!fieldText.contains(".")) {
                fieldText = fieldText + button.getText();

            } else if (fieldText.contains(".") && !button.getText().equals(".")) {
                fieldText = fieldText + button.getText();
            }
            ansField.setText(fieldText);
            this.fieldClear = false;
            if (!fieldText.equals(".")) {
                this.visibleNumber = Double.parseDouble(fieldText);
            }
        }
        this.fieldClear = false;
        this.previousClick = ClickType.NUMERIC;
        System.out.println("visbileNumber: " + visibleNumber);
    }

    private void operationButtonPushed(ActionEvent event) {
        if (event.getSource() == addButton) {
            if (previousClick.equals(ClickType.NUMERIC) && !queuedOperation.equals(Operation.NONE)) {
                executeQueuedOperation();
            }
            queuedOperation = Operation.ADD;
        } else if (event.getSource() == subButton) {
            if (previousClick.equals(ClickType.NUMERIC) && !queuedOperation.equals(Operation.NONE)) {
                executeQueuedOperation();
            }
            queuedOperation = Operation.SUBTRACT;
        } else if (event.getSource() == multiButton) {
            if (previousClick.equals(ClickType.NUMERIC) && !queuedOperation.equals(Operation.NONE)) {
                executeQueuedOperation();
            }
            queuedOperation = Operation.MULTIPLY;
        } else if (event.getSource() == divButton) {
            if (previousClick.equals(ClickType.NUMERIC) && !queuedOperation.equals(Operation.NONE)) {
                executeQueuedOperation();
            }
            queuedOperation = Operation.DIVIDE;
        }
        storedNumber = visibleNumber;
        System.out.println("storedNumber: " + storedNumber);
        previousClick = ClickType.OPERATION;
    }

    private void equalButtonPushed() {
        executeQueuedOperation();
        storedNumber = visibleNumber;
        queuedOperation = Operation.NONE;
        previousClick = ClickType.OPERATION;
    }

    private void plusMinusButtonPushed() {
        if (isNumberNegative(visibleNumber)) {
            ansField.setText(ansField.getText().replace("-", ""));
            visibleNumber *= plusMinus;
        } else {
            ansField.setText("-" + ansField.getText());
            visibleNumber *= plusMinus;
        }
    }

    private void clearButtonPushed() {
        clearField();
        queuedOperation = Operation.NONE;
        storedNumber = 0;
        visibleNumber = 0;
    }

    private void clearField() {
        System.out.println("clearField entry");
        System.out.println("Field contents: " + ansField.getText());
        ansField.setText("");
        fieldClear = true;
        visibleNumber = 0;
        System.out.println("clearField exit. ansField: " + ansField.getText());
    }

    private Boolean isNumberZero(Double number) {
        return number == 0;
    }

    private void printNumbers() {
        System.out.println("visibleNumber: [" + visibleNumber + "]");
        System.out.println("storedNumber: [" + storedNumber + "]");
    }

    private void executeQueuedOperation(){
        System.out.println("QueuedOperation: [" + queuedOperation.toString() + "]");
        printNumbers();
        switch(queuedOperation) {
            case ADD:
                storedNumber = addNumbers(visibleNumber, storedNumber);
                break;
            case SUBTRACT:
                storedNumber = subractNumbers(visibleNumber, storedNumber);
                break;
            case MULTIPLY:
                storedNumber = multiplyNumbers(visibleNumber, storedNumber);
                break;
            case DIVIDE:
                storedNumber = divideNumbers(visibleNumber, storedNumber);
                break;
            default:
                clearField();
                break;
        }
        System.out.println("Operation Results");
        printNumbers();
        ansField.setText(String.valueOf(storedNumber));
        visibleNumber = storedNumber;
    }

    private Double addNumbers(Double num1, Double num2) {
        return num1 + num2;
    }

    private Double subractNumbers(Double num1, Double num2) {
        return num2 - num1;
    }

    private Double multiplyNumbers(Double num1, Double num2) {
        return num1 * num2;
    }

    private Double divideNumbers(Double num1, Double num2) {
        if (isNumberZero(num1)) {
            System.out.println("you dumb fuck you can't divide by zero!");
            return 0D;
        } else {
            return num2 / num1;
        }
    }

}

zeroButton.addActionListener(this);
        oneButton.addActionListener(this);
        twoButton.addActionListener(this);
        threeButton.addActionListener(this);
        fourButton.addActionListener(this);
        fiveButton.addActionListener(this);
        sixButton.addActionListener(this);
        sevenButton.addActionListener(this);
        eightButton.addActionListener(this);
        nineButton.addActionListener(this);
        addButton.addActionListener(this);
        subButton.addActionListener(this);
        multiButton.addActionListener(this);
        divButton.addActionListener(this);
        clearButton.addActionListener(this);
        decimalButton.addActionListener(this);
        plusMinusButton.addActionListener(this);
        equalsButton.addActionListener(this);